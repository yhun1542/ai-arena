name: "Notify (EVENT + Slack)"
description: "Send EVENT JSON to EVENT_WEBHOOK and one-liner to Slack"
inputs:
  ticket:
    required: true
    description: "Ticket ID"
  actor:
    required: true
    description: "Actor"
  phase:
    required: true
    description: "Phase"
  status:
    required: true
    description: "Status"
  notes:
    required: false
    default: ""
    description: "Notes"
  pr:
    required: false
    default: ""
    description: "PR URL"
  preview:
    required: false
    default: ""
    description: "Preview URL"

runs:
  using: "composite"
  steps:
    - name: Ensure jq
      shell: bash
      run: |
        sudo apt-get update && sudo apt-get install -y jq

    - name: Build EVENT JSON file
      shell: bash
      run: |
        TS=$(date -Iseconds)
        RUN_URL="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"
        jq -n \
          --arg t "${{ inputs.ticket }}" \
          --arg a "${{ inputs.actor }}" \
          --arg p "${{ inputs.phase }}" \
          --arg s "${{ inputs.status }}" \
          --arg ts "$TS" \
          --arg pr "${{ inputs.pr }}" \
          --arg run "$RUN_URL" \
          --arg pv "${{ inputs.preview }}" \
          --arg nt "${{ inputs.notes }}" \
          '{ticket_id:$t,actor:$a,phase:$p,status:$s,ts:$ts,links:{pr:$pr,run:$run,preview:$pv},notes:$nt}' > event.json
        echo "Built event.json:"
        cat event.json

    - name: Validate secrets
      shell: bash
      run: |
        if [ -z "$EVENT_WEBHOOK" ]; then
          echo "❌ EVENT_WEBHOOK is empty"
          exit 1
        fi
        if [ -z "$SLACK_WEBHOOK" ]; then
          echo "❌ SLACK_WEBHOOK is empty"
          exit 1
        fi
        if [ -z "$SUPABASE_ANON_KEY" ]; then
          echo "❌ SUPABASE_ANON_KEY is empty"
          exit 1
        fi
        if [ -z "$EVENT_SECRET" ]; then
          echo "❌ EVENT_SECRET is empty"
          exit 1
        fi
        echo "✅ All secrets are present"
      env:
        EVENT_WEBHOOK: ${{ env.EVENT_WEBHOOK }}
        SLACK_WEBHOOK: ${{ env.SLACK_WEBHOOK }}
        SUPABASE_ANON_KEY: ${{ env.SUPABASE_ANON_KEY }}
        EVENT_SECRET: ${{ env.EVENT_SECRET }}

    - name: Send EVENT JSON
      shell: bash
      run: |
        curl -sS -X POST "$EVENT_WEBHOOK" \
          -H "Content-Type: application/json" \
          -H "Authorization: Bearer $SUPABASE_ANON_KEY" \
          -H "x-event-secret: $EVENT_SECRET" \
          --data-binary @event.json \
          --max-time 15 --retry 2 --retry-delay 2
      env:
        EVENT_WEBHOOK: ${{ env.EVENT_WEBHOOK }}
        EVENT_SECRET: ${{ env.EVENT_SECRET }}
        SUPABASE_ANON_KEY: ${{ env.SUPABASE_ANON_KEY }}

    - name: Send Slack message
      shell: bash
      run: |
        MSG="${{ inputs.actor }} ▶ ${{ inputs.ticket }} ${{ inputs.phase }} ${{ inputs.status }} | ${{ inputs.notes }}"
        ESCAPED=$(printf '%s' "$MSG" | jq -Rsa .)
        curl -sS -X POST "$SLACK_WEBHOOK" \
          -H "Content-Type: application/json" \
          --data "{\"text\":$ESCAPED}" \
          --max-time 15 --retry 2 --retry-delay 2
      env:
        SLACK_WEBHOOK: ${{ env.SLACK_WEBHOOK }}

