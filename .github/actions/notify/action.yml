name: 'Notify'
description: 'Send notifications to Slack and Supabase'
inputs:
  ticket:
    description: 'Ticket ID'
    required: true
  actor:
    description: 'Actor name'
    required: true
  phase:
    description: 'Phase name'
    required: true
  status:
    description: 'Status'
    required: true
  notes:
    description: 'Additional notes'
    required: false
    default: ''
runs:
  using: 'composite'
  steps:
    - name: 'Send notifications'
      shell: bash
      run: |
        echo "Sending notifications..."
        echo "Ticket: ${{ inputs.ticket }}"
        echo "Actor: ${{ inputs.actor }}"
        echo "Phase: ${{ inputs.phase }}"
        echo "Status: ${{ inputs.status }}"
        echo "Notes: ${{ inputs.notes }}"
        
        # Create event JSON
        cat > event.json << EOF
        {
          "ticket_id": "${{ inputs.ticket }}",
          "actor": "${{ inputs.actor }}",
          "phase": "${{ inputs.phase }}",
          "status": "${{ inputs.status }}",
          "ts": "$(date -Iseconds)",
          "links": {
            "run": "$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"
          },
          "notes": "${{ inputs.notes }}"
        }
        EOF
        
        echo "Event JSON created:"
        cat event.json
        
        # Send to Slack if webhook is available
        if [ -n "$SLACK_WEBHOOK" ]; then
          MSG="${{ inputs.actor }} â–¶ ${{ inputs.ticket }} ${{ inputs.phase }} ${{ inputs.status }} | ${{ inputs.notes }}"
          curl -X POST "$SLACK_WEBHOOK" \
            -H 'Content-Type: application/json' \
            -d "{\"text\":\"$MSG\"}" || echo "Slack notification failed"
        else
          echo "SLACK_WEBHOOK not set, skipping Slack notification"
        fi
        
        # Send to Supabase if webhook is available
        if [ -n "$EVENT_WEBHOOK" ] && [ -n "$SUPABASE_ANON_KEY" ] && [ -n "$EVENT_SECRET" ]; then
          curl -X POST "$EVENT_WEBHOOK" \
            -H 'Content-Type: application/json' \
            -H "Authorization: Bearer $SUPABASE_ANON_KEY" \
            -H "x-event-secret: $EVENT_SECRET" \
            -d @event.json || echo "Supabase notification failed"
        else
          echo "Supabase credentials not complete, skipping Supabase notification"
        fi
        
        echo "Notifications completed"
      env:
        SLACK_WEBHOOK: ${{ env.SLACK_WEBHOOK }}
        EVENT_WEBHOOK: ${{ env.EVENT_WEBHOOK }}
        SUPABASE_ANON_KEY: ${{ env.SUPABASE_ANON_KEY }}
        EVENT_SECRET: ${{ env.EVENT_SECRET }}

