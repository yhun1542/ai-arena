name: Notify
on:
  workflow_call:
    inputs:
      job_name:   { required: false, type: string, default: "" }
      job_status: { required: false, type: string, default: "" }
      ticket:     { required: false, type: string, default: "" }
      actor:      { required: false, type: string, default: "" }
      phase:      { required: false, type: string, default: "" }
      status:     { required: false, type: string, default: "" }
      notes:      { required: false, type: string, default: "" }
      pr:         { required: false, type: string, default: "" }
      preview:    { required: false, type: string, default: "" }

jobs:
  notify:
    runs-on: ubuntu-latest
    steps:
      - name: Build event payload
        id: make_payload
        shell: bash
        run: |
          set -euo pipefail
          ts="$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
          cat > event.json <<JSON
          {
            "timestamp": "${ts}",
            "repository": "${{ github.repository }}",
            "workflow": "${{ github.workflow }}",
            "run_id": "${{ github.run_id }}",
            "run_number": "${{ github.run_number }}",
            "ref": "${{ github.ref }}",
            "sha": "${{ github.sha }}",
            "actor": "${{ inputs.actor || github.actor }}",
            "job": {
              "name": "${{ inputs.job_name }}",
              "status": "${{ inputs.job_status }}",
              "phase": "${{ inputs.phase }}"
            },
            "deploy": {
              "status": "${{ inputs.status }}",
              "notes": "${{ inputs.notes }}",
              "preview": "${{ inputs.preview }}",
              "pr": "${{ inputs.pr }}"
            },
            "ticket": "${{ inputs.ticket }}"
          }
          JSON

      - name: Send to Supabase (if secrets exist)
        shell: bash
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE: ${{ secrets.SUPABASE_SERVICE_ROLE }}
          EVENT_SECRET: ${{ secrets.EVENT_SECRET }}
        run: |
          set -euo pipefail
          if [ -n "${SUPABASE_URL:-}" ] && [ -n "${SUPABASE_SERVICE_ROLE:-}" ] && [ -n "${EVENT_SECRET:-}" ]; then
            curl -sS -X POST "$SUPABASE_URL/rest/v1/arena_events"               -H "apikey: $SUPABASE_SERVICE_ROLE"               -H "Authorization: Bearer $SUPABASE_SERVICE_ROLE"               -H "Content-Type: application/json"               -H "X-Event-Secret: $EVENT_SECRET"               --data-binary @event.json               --max-time 15 --retry 2 --retry-delay 2
          else
            echo "Supabase secrets not set; skipping."
          fi

      - name: Send Slack one-liner (if webhook set)
        shell: bash
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        run: |
          set -euo pipefail
          if [ -n "${SLACK_WEBHOOK:-}" ]; then
            text="[$GITHUB_REPOSITORY] ${{ inputs.job_name || 'job' }} -> ${{ inputs.job_status || 'unknown' }} (#${{ github.run_number }})"
            payload=$(python - <<'PY'
import json,os
print(json.dumps({"text": os.environ["TEXT"]}))
PY
            )
            curl -sS -X POST "$SLACK_WEBHOOK" -H "Content-Type: application/json" --data "$payload" --max-time 10 --retry 2 --retry-delay 2
          else
            echo "Slack webhook not set; skipping."
          fi
